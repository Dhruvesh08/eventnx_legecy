@model LinkedInDemo.Models.EventMasterModel

@{
    ViewBag.Title = "Create";
}
@using (Html.BeginForm("create", "event", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="mainBlock minheight500">
    @if (ViewBag.Message != null)
    {
    <div class="alert alert-danger">
        <div class="tick">
            @ViewBag.Message
        </div>
        <div class="dashboardboxmain accountvalid top_btn_area"><a id="addToTable1" class="btn btnRed" href="@Url.Action("AddCredit", "Transactions")"><i class="fa fa-dollar"></i>&nbsp;Add Credit</a></div>
    </div>
    }
    else
    {
        <div class="mainBlockTop">
            <div class="mainBlockTopLeft">Add Event</div>
            <div class="back_btn_ara">
                <a id="addtotable1" href="@Url.Action("index", "event")" style="color:#33353f"><i class="fa fa-chevron-left"></i>&nbsp;Back</a>
            </div>
        </div>
        <div class="panel-body">
            <div class="form-horizontal form-bordered innerform">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-lg-12 col-md-12">
                        <ul class="formTop">
                            <li>
                                <span class="lableBlock"><label for="file" class="labelBox">Event Logo</label></span>
                                <span class="inputBlock">
                                    <div class="form-group marginbtmnone">
                                        <div class="uploadresume">
                                            <div class="input-group">
                                                <input type="text" id="tempfile" value="" class="form-control"
                                                       readonly placeholder="Choose File">
                                                <span class="input-group-btn btn-primary btn-none btn_greay">
                                                    <span class="btn btn-file career_btn" id="tempfile">
                                                        Browse
                                                        <input type="file" class="custom-file-input required" name="file" id="file" onchange="readURL(this);" style="width: 100%;" accept=".png,.jpg">
                                                    </span>
                                                </span>
                                            </div>
                                            <span class="text-danger" id="fileerror" style="display:none;">
                                                Please upload event logo
                                            </span>
                                            <div class="set_2" id="filemsg"></div>
                                        </div>
                                    </div>
                                </span>
                            <li class="width100">
                                <div class="eventlobgomainbox">
                                    <span id="spanlogo" style="display:none;">
                                        <img src="@Model.Image" alt="" id="eventlogo">


                                        <a class="btnRed" id="btnremove"><i class="fa fa-trash"></i></a>
                                    </span>
                                </div>
                            </li>



                            <li>
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Event Url*</label>
                                </span>
                                <span class="inputBlock">
                                    @Html.TextBoxFor(model => model.EventURL, new { @class = "form-control", maxlength = 100, @placeholder = "e.g http://example.com" })
                                    @Html.ValidationMessageFor(model => model.EventURL, "", new { @class = "text-danger" })
                                </span>
                            </li>
                            <li>
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Event Name *</label>
                                </span>
                                <span class="inputBlock">
                                    @Html.TextBoxFor(model => model.EventName, new { @class = "form-control", maxlength = 100, @placeholder = "Event Name" })
                                    @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
                                </span>
                            </li>
                            <li>
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Redirect Url *</label>
                                </span>
                                <span class="inputBlock">
                                    @Html.TextBoxFor(model => model.ResponseURL, new { @class = "form-control", maxlength = 100, @placeholder = "e.g http://example.com" })
                                    @Html.ValidationMessageFor(model => model.ResponseURL, "", new { @class = "text-danger" })
                                </span>
                            </li>
                            @*<li>
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Article Title *</label>
                                </span>
                                <span class="inputBlock">
                                    @Html.TextBoxFor(model => model.ArticalTitle, new { @class = "form-control", maxlength = 100, @placeholder = "Article Title" })
                                    @Html.ValidationMessageFor(model => model.ArticalTitle, "", new { @class = "text-danger" })
                                </span>
                            </li>*@
                            <li class="full_li">
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Comment *</label>
                                </span>
                                <span class="inputBlock">
                                    @Html.TextAreaFor(model => model.Commentary, new { cols = "55", rows = "5", @placeholder = "Text to Share on Linkedin" })
                                    @Html.ValidationMessageFor(model => model.Commentary, "", new { @class = "text-danger" })
                                </span>
                            </li>
                            <li class="withd23per">
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Event Start Date *</label>
                                </span>
                                <span style="min-width:initial">
                                    @Html.TextBoxFor(model => model.EventStartDate, new { htmlAttributes = new { @class = "form-control", maxlength = 100, @placeholder = "Select date" } })
                                    @Html.ValidationMessageFor(model => model.EventStartDate, "", new { @class = "text-danger" })
                                </span>

                            </li>
                            <li class="withd23per">
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Event End Date *</label>
                                </span>
                                <span style="min-width:initial">
                                    @Html.TextBoxFor(model => model.EventEndDate, new { htmlAttributes = new { @class = "form-control", maxlength = 100, @placeholder = "Select date" } })
                                    @Html.ValidationMessageFor(model => model.EventEndDate, "", new { @class = "text-danger" })
                                </span>
                            </li>
                            <li>
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Contact Person Name *</label>
                                </span>
                                <span class="inputBlock">
                                    @Html.TextBoxFor(model => model.ContactPersonName, new { @class = "form-control", maxlength = 100, @placeholder = "Contact Person Name" })

                                </span>
                            </li>
                            <li>
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Contact Person Phone *</label>
                                </span>
                                <span class="inputBlock">
                                    @Html.TextBoxFor(model => model.ContactPersonPhone, new { @class = "form-control", maxlength = 15, @placeholder = "Contact Person Phone" })
                                    @Html.ValidationMessageFor(model => model.ContactPersonPhone, "", new { @class = "text-danger" })
                                </span>
                            </li>
                            <li>
                                <span class="lableBlock">
                                    <label class="labelBox" for="inputDefault">Contact Person Email *</label>
                                </span>
                                <span class="inputBlock">
                                    @Html.TextBoxFor(model => model.ContactPersonEmail, new { @class = "form-control", maxlength = 100, @placeholder = "Contact Person Email" })
                                    @Html.ValidationMessageFor(model => model.ContactPersonEmail, "", new { @class = "text-danger" })
                                </span>
                            </li>

                            @*<li>

                                <span class="lableBlock"><label for="file" class="labelBox">Event Button</label></span>
                                <span class="inputBlock">
                                    <div class="form-group marginbtmnone">
                                        <div class="uploadresume">
                                            <div class="input-group">
                                                <input type="text" id="tempbtnfile" value="" class="form-control"
                                                       readonly placeholder="Choose File">
                                                <span class="input-group-btn btn-primary btn-none btn_greay">
                                                    <span class="btn btn-file career_btn" id="tempbtnfile">
                                                        Browse
                                                        <input type="file" class="custom-file-input required" name="filebtn" id="filebtn" onchange="readbtnURL(this);" style="width: 100%;" accept=".png,.jpg">
                                                    </span>
                                                </span>
                                            </div>
                                            <span class="text-danger" id="filebtnerror" style="display:none;">
                                                Please upload event button
                                            </span>
                                            <div class="set_2" id="filemsg"></div>
                                        </div>
                                    </div>
                                </span>
                            <li class="width100">
                                <div class="eventlobgomainbox">
                                    <span id="spanbtnlogo" style="display:none;">
                                        <img src="@Model.Image" alt="" id="btnlogo">


                                        <a class="btnRed" id="btnbuttonremove"><i class="fa fa-trash"></i></a>
                                    </span>
                                </div>
                            </li>*@
                            
                            <li>
                                 
                            </li>

                            <li class="full_li">
                                <div class="offset_30per">
                                    <button id="btnsave" class="btnblack">Save</button>
                                    <a class="btnblack btngreay" href="@Url.Action("Create", "Event")">Reset</a>
                                    <a class="btnblack btngreay1" href="@Url.Action("Index", "Event")">Cancel</a>
                                </div>
                            </li>
                        </ul>
                    </div>
                   
         </div>
                </div>
            </div>
       
    }
</div>
}
<script>
    function copyToClipboard() {
        var $temp = $("<input>");
        $("body").append($temp);
        $temp.val($('.codeblock').html()).select();
        document.execCommand("copy");
        $temp.remove();
    }

    $(document).ready(function () {
        $("#btnsave").click(function () {
            var url = $('#eventlogo').attr('src');
            if (url == null || url == undefined || url == "") {
                $('#fileerror').show();
                return false;
            }
        });

        $('#ContactPersonPhone').blur(function () {
            var num = $('#ContactPersonPhone').val();
            if (isNaN(num)) {
                $('#ContactPersonPhone').val('');
                return false;
            }
            else {
                return true;
               
            }
        });

        $("#EventStartDate").datepicker({
            dateFormat: 'dd-M-yy',
            minDate: new Date()
        });
        $("#EventEndDate").datepicker({
            dateFormat: 'dd-M-yy',
            minDate: new Date()
        });

        $("#EventStartDate").attr("autocomplete", "off");
        $("#EventStartDate").val('');
        $("#EventEndDate").attr("autocomplete", "off");
        $("#EventEndDate").val('');
       
        $("#EventEndDate").change(function () {
            var startdate = Date.parse($('#EventStartDate').val());
            var enddate = Date.parse($('#EventEndDate').val());
            if (startdate >= enddate) {
                alert("Event End Date should be greater than Event Start Date")
                $('#EventEndDate').val('');
                return 
            }
        });
        $('#btnremove').click(function () {
            $('#file').show();
            $('#file').val('');
            $('#tempfile').val('');
            $('#spanlogo').hide();
            $('#eventlogo').attr('src', '');
        });
        $('#btnbuttonremove').click(function () {
            $('#filebtn').show();
            $('#filebtn').val('');
            $('#tempbtnfile').val('');
            $('#spanbtnlogo').hide();
            $('#btnlogo').attr('src', '');
        });
    });

    function readURL(input) {
        //if (input.files[0].size > 60000) {
        //    alert('File size should be 200x200 pixel & Less then 50 KB');
        //    return;
        //}

        var _URL = window.URL || window.webkitURL;
        var file, img;
        if ((file = input.files[0])) {
            img = new Image();
            img.onload = function () {
                //if (this.width > 200 || this.height > 200) {
                //    alert('File size should be 200x200 pixel & Less then 50 KB');
                //    return;
                //}
               
                //else {
                    if (input.files && input.files[0]) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $('#file').hide();
                            $('#spanlogo').show();
                            $('#eventlogo')
                                .attr('src', e.target.result);
                            $('#fileerror').hide();
                        };
                        reader.readAsDataURL(input.files[0]);
                    }
                //}
            };
            img.src = _URL.createObjectURL(file);
        }
    }
    function readbtnURL(input) {
        //if (input.files[0].size > 60000) {
        //    alert('File size should be 200x200 pixel & Less then 50 KB');
        //    return;
        //}

        var _URL = window.URL || window.webkitURL;
        var file, img;
        if ((file = input.files[0])) {
            img = new Image();
            img.onload = function () {
                //if (this.width > 200 || this.height > 200) {
                //    alert('File size should be 200x200 pixel & Less then 50 KB');
                //    return;
                //}

                //else {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#filebtn').hide();
                        $('#spanbtnlogo').show();
                        $('#btnlogo')
                            .attr('src', e.target.result);
                        $('#filebtnerror').hide();
                    };
                    reader.readAsDataURL(input.files[0]);
                }
                //}
            };
            img.src = _URL.createObjectURL(file);
        }
    }
</script>